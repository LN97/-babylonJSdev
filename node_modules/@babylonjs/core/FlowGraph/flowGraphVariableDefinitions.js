import { FlowGraphContext } from "./flowGraphContext.js";
/**
 * @experimental
 * This class represents the definition of a variable, with a name and
 * a default value. It can be used to create a context.
 */
export class FlowGraphVariableDefinitions {
    constructor() {
        this._definitions = new Map();
    }
    /**
     * Defines a variable
     * @param name
     * @param defaultValue
     */
    defineVariable(name, defaultValue) {
        this._definitions.set(name, defaultValue);
    }
    /**
     * Generate a context object from the definitions
     * @param params
     * @returns
     */
    generateContext(params) {
        const context = new FlowGraphContext(params);
        this._definitions.forEach((value, key) => {
            context.setVariable(key, value);
        });
        return context;
    }
    /**
     * Serializes the definitions
     * @param serializationObject
     */
    serialize(serializationObject) {
        this._definitions.forEach((value, key) => {
            serializationObject[key] = value;
        });
    }
    /**
     * Deserialize definitions to this object
     * @param serializationObject
     */
    deserialize(serializationObject) {
        this._definitions.clear();
        for (const key in serializationObject) {
            this._definitions.set(key, serializationObject[key]);
        }
    }
}
//# sourceMappingURL=flowGraphVariableDefinitions.js.map